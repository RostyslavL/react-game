{"version":3,"sources":["Snake.js","Bait.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","react_default","a","createElement","snakePoints","map","points","i","style","left","concat","top","className","key","getRandomColor","color","Math","floor","random","Bait","dot","backgroundColor","getRandomCoordinates","initialState","bait","speed","direction","App","state","onKeyDown","e","window","event","keyCode","_this","setState","moveSnake","dots","Object","toConsumableArray","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","_this2","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","Fragment","src_Bait","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.519dafc2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakePoints.map((points, i) => {\r\n        const style = {\r\n          left: `${points[0]}%`,\r\n          top: `${points[1]}%`\r\n        }\r\n        return (\r\n          <div className=\"snake-point\" key={i} style={style}></div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n// https://stackoverflow.com/questions/10014271/generate-random-color-distinguishable-to-humans\r\nconst getRandomColor = () =>{\r\n    var letters = '0123456789ABCDEF'\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)]\r\n    }\r\n    return color;\r\n  }\r\nconst Bait = (props) => {\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`,\r\n        backgroundColor : getRandomColor()\r\n      }\r\n    \r\n      return (\r\n        <div className=\"bait\" style={style}></div>\r\n      )\r\n}\r\n\r\nexport default Bait\r\n","import React, { Component } from 'react';\r\nimport Snake from './Snake';\r\nimport Bait from './Bait';\r\n\r\nconst getRandomCoordinates = () => {\r\n  let min = 1;\r\n  let max = 98;\r\n  let x = Math.floor((Math.random()*(max-min + 1) + min)/2)*2;\r\n  let y =  Math.floor((Math.random()*(max-min + 1) + min)/2)*2;\r\n  return [x,y]\r\n}\r\n\r\nconst initialState = {\r\n  bait: getRandomCoordinates(),\r\n  speed: 200,\r\n  direction: 'RIGHT',\r\n  snakePoints: [\r\n    [0,0],\r\n    [2,0]\r\n  ],\r\n  \r\n}\r\n\r\nclass App extends Component {\r\n\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkIfOutOfBorders();\r\n    this.checkIfCollapsed();\r\n    this.checkIfEat();\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({direction: 'UP'});\r\n        break;\r\n      case 40:\r\n        this.setState({direction: 'DOWN'});\r\n        break;\r\n      case 37:\r\n        this.setState({direction: 'LEFT'});\r\n        break;\r\n      case 39:\r\n        this.setState({direction: 'RIGHT'});\r\n        break;\r\n    }\r\n  }\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakePoints];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakePoints: dots\r\n    })\r\n  }\r\n\r\n  checkIfOutOfBorders() {\r\n    let head = this.state.snakePoints[this.state.snakePoints.length - 1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n\r\n  checkIfCollapsed() {\r\n    let snake = [...this.state.snakePoints];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach(dot => {\r\n      if (head[0] == dot[0] && head[1] == dot[1]) {\r\n        this.onGameOver();\r\n      }\r\n    })\r\n  }\r\n\r\n  checkIfEat() {\r\n    let head = this.state.snakePoints[this.state.snakePoints.length - 1];\r\n    let bait = this.state.bait;\r\n    if (head[0] == bait[0] && head[1] == bait[1]) {\r\n      this.setState({\r\n        bait: getRandomCoordinates()\r\n      })\r\n      this.enlargeSnake();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  enlargeSnake() {\r\n    let newSnake = [...this.state.snakePoints];\r\n    newSnake.unshift([])\r\n    this.setState({\r\n      snakePoints: newSnake\r\n    })\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10\r\n      })\r\n    }\r\n  }\r\n\r\n  onGameOver() {\r\n    alert(`Game Over. Snake length is ${this.state.snakePoints.length}`);\r\n    this.setState(initialState)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <> \r\n\r\n      <div className=\"game-area\">\r\n        <Snake snakePoints={this.state.snakePoints}/>\r\n        <Bait dot={this.state.bait}/>\r\n        \r\n        \r\n      </div>\r\n      <React.Fragment>\r\n          <div className=\"game-score\">\r\n            <h1> Score : {this.state.snakePoints.length }</h1>\r\n          </div>\r\n        </React.Fragment>\r\n      </>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}